import streamlit as st
import pandas as pd
import plotly.express as px

# =================================================================================
# 1. PAGE CONFIGURATION
# Set the page to a wide layout and add a title/icon for the browser tab.
# =================================================================================
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä")


# =================================================================================
# 2. DATA LOADING
# This function loads data from a file.
# @st.cache_data decorator ensures the data is loaded only once, improving performance.
# =================================================================================
@st.cache_data
def load_data(file_path="df.xlsx"):
    """
    Loads data from the specified file path.
    Handles potential FileNotFoundError if the file is missing.
    """
    try:
        # If you are using a CSV file, change the line below to:
        # df = pd.read_csv(file_path)
        df = pd.read_excel(file_path)
        return df
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{file_path}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ app.py.")
        return None

# Load the data into the app
df = load_data()

# Stop the app if data could not be loaded to prevent further errors
if df is None:
    st.stop()

# Define the list of columns that the user can select for grouping the data
grouping_columns = ['–û–±–ª–∞—Å—Ç—å', '–¢–∏–ø —à–∫–æ–ª—ã', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–µ–¥–º–µ—Ç', '–ü–æ–ª']


# =================================================================================
# 3. SIDEBAR WITH USER CONTROLS
# The sidebar is used for all user inputs and filters.
# =================================================================================
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

# --- REFINED: Multi-select for grouping columns ---
group_cols = st.sidebar.multiselect(
    "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
    options=grouping_columns,
    default=['–û–±–ª–∞—Å—Ç—å', '–ü–æ–ª'] # Set a useful default
)

# --- REFINED: Dynamic filters based on selected grouping columns ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
filters = {}
if not group_cols:
    st.sidebar.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
else:
    for col in group_cols:
        options = sorted(df[col].unique())
        # Use a descriptive label for each filter
        filters[col] = st.sidebar.multiselect(
            f"–§–∏–ª—å—Ç—Ä –ø–æ '{col}'",
            options=options,
            default=options # Default to all options selected
        )


# =================================================================================
# 4. MAIN PANEL WITH VISUALIZATIONS
# This section displays the title and the charts.
# =================================================================================
st.title("–ü–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫—É—Ä—Å—É")

# Check if the user has selected any grouping categories
if not group_cols:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    st.stop()

# --- REFINED: Apply all active filters ---
filtered_df = df.copy()
for col, selected_values in filters.items():
    if selected_values: # Only filter if a value is selected
        filtered_df = filtered_df[filtered_df[col].isin(selected_values)]

if filtered_df.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
    st.stop()

# --- REFINED: Group by a list of columns ---
avg_scores = filtered_df.groupby(group_cols)['–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'].mean().round(2).reset_index()

# --- REFINED: Create a combined label for the bar chart y-axis ---
if len(group_cols) > 1:
    avg_scores['display_label'] = avg_scores[group_cols].apply(lambda row: ' - '.join(row.values.astype(str)), axis=1)
    y_axis_label = 'display_label'
else:
    y_axis_label = group_cols[0]

avg_scores = avg_scores.sort_values('–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª')

# --- Horizontal Bar Chart ---
st.subheader(f"–°—Ä–µ–¥–Ω–∏–π '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª' –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
num_bars = len(avg_scores)
bar_chart_height = max(400, num_bars * 35)

bar_fig = px.bar(
    avg_scores,
    x='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    y=y_axis_label,
    orientation='h',
    text='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color_continuous_scale=px.colors.sequential.Tealgrn,
    height=bar_chart_height
)
bar_fig.update_layout(xaxis_title="–°—Ä–µ–¥–Ω–∏–π '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'", yaxis_title="–ì—Ä—É–ø–ø—ã")
st.plotly_chart(bar_fig, use_container_width=True)


# --- Box Plot ---
st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

# --- REFINED: Use color for the second dimension in the box plot ---
box_color = group_cols[1] if len(group_cols) > 1 else None

box_fig = px.box(
    filtered_df,
    x=group_cols[0],
    y='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color=box_color,
    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ '{group_cols[0]}' —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ '{box_color}'" if box_color else f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ '{group_cols[0]}'"
)
box_fig.update_layout(yaxis_title="'–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'", xaxis_title=group_cols[0])
st.plotly_chart(box_fig, use_container_width=True)
