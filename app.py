import streamlit as st
import pandas as pd
import plotly.express as px

# =================================================================================
# 1. PAGE CONFIGURATION
# Set the page to a wide layout and add a title/icon for the browser tab.
# =================================================================================
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä")


# =================================================================================
# 2. DATA LOADING
# This function loads data from a file.
# @st.cache_data decorator ensures the data is loaded only once, improving performance.
# =================================================================================
@st.cache_data
def load_data(file_path="df.xlsx"):
    """
    Loads data from the specified file path.
    Handles potential FileNotFoundError if the file is missing.
    """
    try:
        # If you are using a CSV file, change the line below to:
        # df = pd.read_csv(file_path)
        df = pd.read_excel(file_path)
        return df
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{file_path}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ app.py.")
        return None

# Load the data into the app
df = load_data()

# Stop the app if data could not be loaded to prevent further errors
if df is None:
    st.stop()

# Define the list of columns that the user can select for grouping the data
grouping_columns = ['–û–±–ª–∞—Å—Ç—å', '–¢–∏–ø —à–∫–æ–ª—ã', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ü—Ä–µ–¥–º–µ—Ç', '–ü–æ–ª']


# =================================================================================
# 3. SIDEBAR WITH USER CONTROLS
# The sidebar is used for all user inputs and filters.
# =================================================================================
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

# Step 1: Dropdown to select the main category for grouping
group_col = st.sidebar.selectbox(
    "–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
    options=grouping_columns
)

# Step 2: Multi-select box to choose the specific items to compare
# The options in this box are dynamically updated based on the selection in Step 1.
options = sorted(df[group_col].unique())
filter_values = st.sidebar.multiselect(
    "–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
    options=options,
    default=options[:3]  # Set a default selection of the first three items
)


# =================================================================================
# 4. MAIN PANEL WITH VISUALIZATIONS
# This section displays the title and the charts.
# =================================================================================
st.title("üìä –ü–∞–Ω–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫—É—Ä—Å—É")

# Check if the user has selected any values in the multiselect box
if not filter_values:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    st.stop() # Stop the script execution if nothing is selected

# Filter the DataFrame based on the user's selections
filtered_df = df[df[group_col].isin(filter_values)]
avg_scores = filtered_df.groupby(group_col)['–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'].mean().round(2).reset_index().sort_values('–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª')

# --- Horizontal Bar Chart ---
st.subheader(f"–°—Ä–µ–¥–Ω–∏–π '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª' –ø–æ '{group_col}'")

# Dynamically calculate the chart height based on the number of bars
num_bars = len(avg_scores)
bar_chart_height = max(300, num_bars * 45)

bar_fig = px.bar(
    avg_scores,
    x='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    y=group_col,
    orientation='h',
    text='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color_continuous_scale=px.colors.sequential.Tealgrn,
    height=bar_chart_height
)
bar_fig.update_layout(xaxis_title="–°—Ä–µ–¥–Ω–∏–π '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'", yaxis_title=None)
st.plotly_chart(bar_fig, use_container_width=True)


# --- Box Plot ---
st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ '{group_col}'")
box_fig = px.box(
    filtered_df,
    x=group_col,
    y='–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª',
    color=group_col
)
box_fig.update_layout(yaxis_title="'–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª'", xaxis_title=None)
st.plotly_chart(box_fig, use_container_width=True)
