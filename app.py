# app.py (lightweight version)
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# =============================================================================
# CONFIG
# =============================================================================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä", layout="wide")

OUTCOME = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

@st.cache_data
def load_data(path="df.xlsx"):
    try:
        return pd.read_excel(path)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()

df = load_data()
if df.empty or OUTCOME not in df.columns:
    st.stop()

df[OUTCOME] = pd.to_numeric(df[OUTCOME], errors="coerce")

# =============================================================================
# SIDEBAR FILTERS
# =============================================================================
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# Geography cascade
sel_obl, sel_rn, sel_org = [], [], []
if "–û–±–ª–∞—Å—Ç—å" in df.columns:
    opts = sorted(df["–û–±–ª–∞—Å—Ç—å"].dropna().unique())
    sel_obl = st.sidebar.multiselect("–û–±–ª–∞—Å—Ç—å", opts, default=opts)
if "–†–∞–π–æ–Ω" in df.columns and sel_obl:
    opts = sorted(df[df["–û–±–ª–∞—Å—Ç—å"].isin(sel_obl)]["–†–∞–π–æ–Ω"].dropna().unique())
    sel_rn = st.sidebar.multiselect("–†–∞–π–æ–Ω", opts, default=opts)
if "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" in df.columns and sel_rn:
    opts = sorted(df[df["–†–∞–π–æ–Ω"].isin(sel_rn)]["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"].dropna().unique())
    sel_org = st.sidebar.multiselect("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", opts, default=opts)

# Apply filters
filtered = df.copy()
if sel_obl: filtered = filtered[filtered["–û–±–ª–∞—Å—Ç—å"].isin(sel_obl)]
if sel_rn: filtered = filtered[filtered["–†–∞–π–æ–Ω"].isin(sel_rn)]
if sel_org: filtered = filtered[filtered["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"].isin(sel_org)]

if filtered.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
    st.stop()

# =============================================================================
# KPIs
# =============================================================================
st.title("üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")

c1, c2, c3 = st.columns(3)
c1.metric("–ó–∞–ø–∏—Å–µ–π", len(filtered))
c2.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{filtered[OUTCOME].mean():.2f}")
c3.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{filtered[OUTCOME].median():.2f}")

# =============================================================================
# TABS
# =============================================================================
tab1, tab2, tab3, tab4, tab5 = st.tabs(["–û–±–∑–æ—Ä", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ"])

# --- TAB 1: OVERVIEW ---
with tab1:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤")
    c1, c2 = st.columns([2,1])
    with c1:
        st.plotly_chart(px.histogram(filtered, x=OUTCOME, nbins=30, color_discrete_sequence=["#2a9d8f"]), use_container_width=True)
    with c2:
        st.plotly_chart(px.box(filtered, y=OUTCOME, points="all", color_discrete_sequence=["#e76f51"]), use_container_width=True)

    st.subheader("–†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    cat_cols = [c for c in df.columns if c not in ["id", OUTCOME, "–û–±–ª–∞—Å—Ç—å","–†–∞–π–æ–Ω","–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]]
    rank_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", options=cat_cols)
    if rank_col:
        avg = filtered.groupby(rank_col)[OUTCOME].mean().reset_index().sort_values(OUTCOME)
        st.plotly_chart(px.bar(avg, x=OUTCOME, y=rank_col, orientation="h", color=OUTCOME, color_continuous_scale="Tealgrn"), use_container_width=True)

# --- TAB 2: GEOGRAPHY ---
with tab2:
    st.subheader("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏")
    geo_col = st.radio("–£—Ä–æ–≤–µ–Ω—å", [c for c in ["–û–±–ª–∞—Å—Ç—å","–†–∞–π–æ–Ω","–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"] if c in filtered.columns])
    if geo_col:
        avg = filtered.groupby(geo_col)[OUTCOME].mean().reset_index().sort_values(OUTCOME)
        st.plotly_chart(px.bar(avg, x=OUTCOME, y=geo_col, orientation="h", color=OUTCOME, color_continuous_scale="Tealgrn"), use_container_width=True)

# --- TAB 3: CATEGORIES ---
with tab3:
    st.subheader("–†–∞–∑—Ä–µ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", options=[c for c in df.columns if c not in ["id", OUTCOME]])
    if col:
        st.plotly_chart(px.box(filtered, x=col, y=OUTCOME, color=col), use_container_width=True)

# --- TAB 4: COMPARISON ---
with tab4:
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å—Ç—Ä–∞—Ç")
    cmp_col = st.selectbox("–°—Ç—Ä–∞—Ç–∞", options=[c for c in df.columns if c not in ["id", OUTCOME]])
    if cmp_col:
        levels = filtered[cmp_col].dropna().unique()
        if len(levels) >= 2:
            l1 = st.selectbox("–ì—Ä—É–ø–ø–∞ A", options=levels)
            l2 = st.selectbox("–ì—Ä—É–ø–ø–∞ B", options=[x for x in levels if x != l1])
            A = filtered[filtered[cmp_col]==l1][OUTCOME]
            B = filtered[filtered[cmp_col]==l2][OUTCOME]
            c1, c2, c3 = st.columns(3)
            c1.metric(f"{l1} —Å—Ä–µ–¥–Ω–µ–µ", f"{A.mean():.2f}")
            c2.metric(f"{l2} —Å—Ä–µ–¥–Ω–µ–µ", f"{B.mean():.2f}")
            c3.metric("–†–∞–∑–Ω–∏—Ü–∞", f"{A.mean()-B.mean():+.2f}")
            st.plotly_chart(px.box(filtered[filtered[cmp_col].isin([l1,l2])], x=cmp_col, y=OUTCOME, color=cmp_col), use_container_width=True)

# --- TAB 5: DATA ---
with tab5:
    st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(filtered, use_container_width=True)
    st.download_button("–°–∫–∞—á–∞—Ç—å CSV", filtered.to_csv(index=False).encode("utf-8-sig"), "filtered.csv", "text/csv")
