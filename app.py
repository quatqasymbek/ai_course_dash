# app.py (interactive dashboard with filters)
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json

# =============================================================================
# CONFIG
# =============================================================================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä", layout="wide")
OUTCOME = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

@st.cache_data
def load_data(path="df.xlsx"):
    try:
        return pd.read_excel(path)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()

df = load_data()
if df.empty or OUTCOME not in df.columns:
    st.stop()

df[OUTCOME] = pd.to_numeric(df[OUTCOME], errors="coerce")

# =============================================================================
# SIDEBAR FILTERS
# =============================================================================
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# Start with a copy of the original dataframe
df_filtered = df.copy()

# Define columns to create filters for
filter_columns = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"]
selections = {}

# Create a multiselect widget for each filter column if it exists
for col in filter_columns:
    if col in df.columns:
        options = sorted(df[col].dropna().unique())
        selections[col] = st.sidebar.multiselect(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {col}",
            options=options,
            default=options, # By default, all options are selected
            key=f"multiselect_{col}" # Unique key for each widget
        )
        # Apply the filter to the dataframe
        if selections[col]:
            df_filtered = df_filtered[df_filtered[col].isin(selections[col])]

# Stop if filters result in an empty dataframe
if df_filtered.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
    st.stop()

# =============================================================================
# TITLE
# =============================================================================
st.title("üìä –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
st.markdown("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –æ–±–ª–∞—Å—Ç—è–º.")

# =============================================================================
# OVERALL STATS (uses df_filtered)
# =============================================================================
st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
c1, c2, c3 = st.columns(3)

with c1:
    st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", f"{len(df_filtered):,}")

with c2:
    # Handle case where there might be no valid scores after filtering
    mean_score = df_filtered[OUTCOME].mean()
    st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{mean_score:.2f}" if not pd.isna(mean_score) else "N/A")

with c3:
    median_score = df_filtered[OUTCOME].median()
    st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π –±–∞–ª–ª", f"{median_score:.2f}" if not pd.isna(median_score) else "N/A")

st.markdown("---") # Add a divider

# =============================================================================
# STATIC SECTION 1 ‚Äî –ü–æ–ª (uses df_filtered)
# =============================================================================
if "–ü–æ–ª" in df_filtered.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É")
    c1, c2 = st.columns(2)

    with c1:
        st.plotly_chart(
            px.box(df_filtered, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª",
                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –ø–æ–ª—É"),
            use_container_width=True
        )

    with c2:
        avg_gender = df_filtered.groupby("–ü–æ–ª")[OUTCOME].mean().reset_index()
        st.plotly_chart(
            px.bar(avg_gender, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª",
                   title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –ø–æ–ª—É",
                   color_discrete_sequence=px.colors.sequential.Teal),
            use_container_width=True
        )

# =============================================================================
# STATIC SECTION 2 ‚Äî –í–æ–∑—Ä–∞—Å—Ç (uses df_filtered)
# =============================================================================
if "–í–æ–∑—Ä–∞—Å—Ç" in df_filtered.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")

    # Scatter with rolling mean smoothing
    scatter = go.Scatter(
        x=df_filtered["–í–æ–∑—Ä–∞—Å—Ç"], y=df_filtered[OUTCOME],
        mode="markers", opacity=0.4,
        marker=dict(color="#2a9d8f"),
        name="–ù–∞–±–ª—é–¥–µ–Ω–∏—è"
    )

    df_sorted = df_filtered.sort_values("–í–æ–∑—Ä–∞—Å—Ç")
    df_sorted["rolling_mean"] = df_sorted[OUTCOME].rolling(window=30, min_periods=1).mean()

    smooth = go.Scatter(
        x=df_sorted["–í–æ–∑—Ä–∞—Å—Ç"], y=df_sorted["rolling_mean"],
        mode="lines", line=dict(color="orange", width=3),
        name="–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (30)"
    )

    fig = go.Figure([scatter, smooth])
    fig.update_layout(title="–í–æ–∑—Ä–∞—Å—Ç –∏ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª (—Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥)",
                      xaxis_title="–í–æ–∑—Ä–∞—Å—Ç", yaxis_title=OUTCOME)

    st.plotly_chart(fig, use_container_width=True)

if "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" in df_filtered.columns:
    c1, c2 = st.columns(2)

    with c1:
        st.plotly_chart(
            px.box(df_filtered, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME, color="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"),
            use_container_width=True
        )

    with c2:
        avg_agegrp = df_filtered.groupby("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")[OUTCOME].mean().reset_index()
        st.plotly_chart(
            px.bar(avg_agegrp, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME,
                   title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º",
                   color=OUTCOME, color_continuous_scale="Tealgrn"),
            use_container_width=True
        )

# =============================================================================
# STATIC SECTION 3 ‚Äî –û–±–ª–∞—Å—Ç–∏ (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫) (uses df_filtered)
# =============================================================================
if "–û–±–ª–∞—Å—Ç—å" in df_filtered.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º")

    # Get all unique regions from the original dataframe for a complete list
    all_regions = pd.DataFrame({"–û–±–ª–∞—Å—Ç—å": sorted(df["–û–±–ª–∞—Å—Ç—å"].unique())})

    # Calculate averages based on the filtered data
    avg_obl = (
        df_filtered.groupby("–û–±–ª–∞—Å—Ç—å")[OUTCOME]
        .mean()
        .round(2)
        .reset_index()
    )

    # Merge to ensure all regions are shown, even if they have no data after filtering
    avg_obl_full = all_regions.merge(avg_obl, on="–û–±–ª–∞—Å—Ç—å", how="left")

    st.plotly_chart(
        px.bar(avg_obl_full.sort_values(OUTCOME, na_position="last"),
               x=OUTCOME, y="–û–±–ª–∞—Å—Ç—å", orientation="h",
               color=OUTCOME, color_continuous_scale="Tealgrn",
               title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –æ–±–ª–∞—Å—Ç—è–º"),
        use_container_width=True
    )

