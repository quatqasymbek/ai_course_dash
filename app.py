# app.py (static-first lightweight dashboard without statsmodels)
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json

# =============================================================================
# CONFIG
# =============================================================================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä", layout="wide")
OUTCOME = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

@st.cache_data
def load_data(path="df.xlsx"):
    try:
        return pd.read_excel(path)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()

df = load_data()
if df.empty or OUTCOME not in df.columns:
    st.stop()

df[OUTCOME] = pd.to_numeric(df[OUTCOME], errors="coerce")

# =============================================================================
# TITLE
# =============================================================================
st.title("üìä –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
st.markdown("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –æ–±–ª–∞—Å—Ç—è–º.")

# =============================================================================
# STATIC SECTION 1 ‚Äî –ü–æ–ª
# =============================================================================
if "–ü–æ–ª" in df.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É")
    c1, c2 = st.columns(2)

    with c1:
        st.plotly_chart(
            px.box(df, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª",
                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –ø–æ–ª—É"),
            use_container_width=True
        )

    with c2:
        avg_gender = df.groupby("–ü–æ–ª")[OUTCOME].mean().reset_index()
        st.plotly_chart(
            px.bar(avg_gender, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª",
                   title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –ø–æ–ª—É",
                   color_discrete_sequence=px.colors.sequential.Teal),
            use_container_width=True
        )

# =============================================================================
# STATIC SECTION 2 ‚Äî –í–æ–∑—Ä–∞—Å—Ç
# =============================================================================
if "–í–æ–∑—Ä–∞—Å—Ç" in df.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")

    # Scatter with rolling mean smoothing
    scatter = go.Scatter(
        x=df["–í–æ–∑—Ä–∞—Å—Ç"], y=df[OUTCOME],
        mode="markers", opacity=0.4,
        marker=dict(color="#2a9d8f"),
        name="–ù–∞–±–ª—é–¥–µ–Ω–∏—è"
    )

    df_sorted = df.sort_values("–í–æ–∑—Ä–∞—Å—Ç")
    df_sorted["rolling_mean"] = df_sorted[OUTCOME].rolling(window=30, min_periods=1).mean()

    smooth = go.Scatter(
        x=df_sorted["–í–æ–∑—Ä–∞—Å—Ç"], y=df_sorted["rolling_mean"],
        mode="lines", line=dict(color="orange", width=3),
        name="–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (30)"
    )

    fig = go.Figure([scatter, smooth])
    fig.update_layout(title="–í–æ–∑—Ä–∞—Å—Ç –∏ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª (—Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥)",
                      xaxis_title="–í–æ–∑—Ä–∞—Å—Ç", yaxis_title=OUTCOME)

    st.plotly_chart(fig, use_container_width=True)

if "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" in df.columns:
    c1, c2 = st.columns(2)

    with c1:
        st.plotly_chart(
            px.box(df, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME, color="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                   title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"),
            use_container_width=True
        )

    with c2:
        avg_agegrp = df.groupby("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")[OUTCOME].mean().reset_index()
        st.plotly_chart(
            px.bar(avg_agegrp, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME,
                   title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º",
                   color=OUTCOME, color_continuous_scale="Tealgrn"),
            use_container_width=True
        )

# =============================================================================
# STATIC SECTION 3 ‚Äî –û–±–ª–∞—Å—Ç–∏
# =============================================================================
if "–û–±–ª–∞—Å—Ç—å" in df.columns:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º")

    avg_obl = df.groupby("–û–±–ª–∞—Å—Ç—å")[OUTCOME].mean().reset_index().sort_values(OUTCOME)

    st.plotly_chart(
        px.bar(avg_obl, x=OUTCOME, y="–û–±–ª–∞—Å—Ç—å", orientation="h",
               color=OUTCOME, color_continuous_scale="Tealgrn",
               title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –æ–±–ª–∞—Å—Ç—è–º"),
        use_container_width=True
    )

    # Optional Map ‚Äî load only when user expands
    with st.expander("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞"):
        try:
            with open("kazakhstan_regions.geojson", "r", encoding="utf-8") as f:
                geojson = json.load(f)

            map_fig = px.choropleth(
                avg_obl,
                geojson=geojson,
                featureidkey="properties.name",
                locations="–û–±–ª–∞—Å—Ç—å",
                color=OUTCOME,
                color_continuous_scale="Tealgrn",
                title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –æ–±–ª–∞—Å—Ç—è–º (–∫–∞—Ä—Ç–∞)"
            )
            map_fig.update_geos(fitbounds="locations", visible=False)
            st.plotly_chart(map_fig, use_container_width=True)

        except FileNotFoundError:
            st.warning("–§–∞–π–ª kazakhstan_regions.geojson –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ app.py.")

# =============================================================================
# OPTIONAL ‚Äî RAW DATA PREVIEW
# =============================================================================
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.dataframe(df, use_container_width=True)
