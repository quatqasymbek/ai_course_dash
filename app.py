# app.py (multi-page static dashboard with global filters)
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json

# =============================================================================
# CONFIG
# =============================================================================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä", layout="wide")
OUTCOME = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

@st.cache_data
def load_data(path="df.xlsx"):
    try:
        return pd.read_excel(path)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()

df = load_data()
if df.empty or OUTCOME not in df.columns:
    st.stop()

df[OUTCOME] = pd.to_numeric(df[OUTCOME], errors="coerce")

# =============================================================================
# SIDEBAR: NAVIGATION & FILTERS
# =============================================================================
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ö–∞—Ä—Ç–∞"])

st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
df_filtered = df.copy()

# --- Subject Filter ---
if "–ü—Ä–µ–¥–º–µ—Ç" in df.columns:
    subjects = sorted(df['–ü—Ä–µ–¥–º–µ—Ç'].dropna().unique())
    selected_subjects = st.sidebar.multiselect(
        '–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É:',
        options=subjects,
        default=subjects
    )
    if not selected_subjects:
        df_filtered = pd.DataFrame(columns=df.columns)
    else:
        df_filtered = df_filtered[df_filtered['–ü—Ä–µ–¥–º–µ—Ç'].isin(selected_subjects)]

# --- Position Filter (cascading) ---
if "–î–æ–ª–∂–Ω–æ—Å—Ç—å" in df.columns and not df_filtered.empty:
    positions = sorted(df_filtered['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].dropna().unique())
    selected_positions = st.sidebar.multiselect(
        '–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:',
        options=positions,
        default=positions
    )
    if not selected_positions:
        df_filtered = pd.DataFrame(columns=df.columns)
    else:
        df_filtered = df_filtered[df_filtered['–î–æ–ª–∂–Ω–æ—Å—Ç—å'].isin(selected_positions)]

# =============================================================================
# PAGE 1: –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
# =============================================================================
if page == "–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑":
    st.title("–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")

    if df_filtered.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    else:
        st.markdown("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –æ–±–ª–∞—Å—Ç—è–º.")
        # --- OVERALL STATS ---
        st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", f"{len(df_filtered):,}")
        with c2:
            st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{df_filtered[OUTCOME].mean():.2f}")
        with c3:
            st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π –±–∞–ª–ª", f"{df_filtered[OUTCOME].median():.2f}")
        st.markdown("---")

        # --- GENDER STATS ---
        if "–ü–æ–ª" in df_filtered.columns:
            st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É")
            c1, c2 = st.columns(2)
            with c1:
                st.plotly_chart(px.box(df_filtered, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –ø–æ–ª—É"), use_container_width=True)
            with c2:
                agg_gender = df_filtered.groupby("–ü–æ–ª").agg(
                    avg_score=(OUTCOME, 'mean'),
                    count=(OUTCOME, 'size')
                ).reset_index()
                agg_gender['bar_text'] = agg_gender.apply(
                    lambda row: f"–°—Ä. –±–∞–ª–ª: {row['avg_score']:.2f}<br>–ö–æ–ª-–≤–æ: {int(row['count'])}",
                    axis=1
                )

                fig_gender = px.bar(
                    agg_gender,
                    x="–ü–æ–ª",
                    y='avg_score',
                    color="–ü–æ–ª",
                    title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –ø–æ–ª—É",
                    text='bar_text',
                    color_discrete_sequence=px.colors.sequential.Teal
                )
                fig_gender.update_traces(texttemplate='%{text}', textposition='inside')
                fig_gender.update_layout(yaxis_title="–°—Ä–µ–¥–Ω–∏–π " + OUTCOME)
                st.plotly_chart(fig_gender, use_container_width=True)

        # --- AGE STATS ---
        if "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" in df_filtered.columns:
            st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
            age_group_order = ['<25', '25-30', '30-35', '35-40', '40-45', '45-50', '50-55', '55-60', '>60']
            df_filtered['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'] = pd.Categorical(df_filtered['–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'], categories=age_group_order, ordered=True)
            c1, c2 = st.columns(2)
            with c1:
                st.plotly_chart(px.box(df_filtered, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME, color="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"), use_container_width=True)
            with c2:
                agg_agegrp = df_filtered.groupby("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", observed=False).agg(
                    avg_score=(OUTCOME, 'mean'),
                    count=(OUTCOME, 'size')
                ).reset_index()
                agg_agegrp['bar_text'] = agg_agegrp.apply(
                    lambda row: f"–°—Ä. –±–∞–ª–ª: {row['avg_score']:.2f}<br>–ö–æ–ª-–≤–æ: {int(row['count'])}",
                    axis=1
                )

                fig_agegrp = px.bar(
                    agg_agegrp,
                    x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
                    y='avg_score',
                    title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º",
                    color='avg_score',
                    text='bar_text',
                    color_continuous_scale="Tealgrn"
                )
                fig_agegrp.update_traces(texttemplate='%{text}', textposition='inside')
                fig_agegrp.update_layout(yaxis_title="–°—Ä–µ–¥–Ω–∏–π " + OUTCOME)
                st.plotly_chart(fig_agegrp, use_container_width=True)

        # --- REGION STATS ---
        if "–û–±–ª–∞—Å—Ç—å" in df_filtered.columns:
            st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º")
            all_regions = pd.DataFrame({"–û–±–ª–∞—Å—Ç—å": sorted(df["–û–±–ª–∞—Å—Ç—å"].unique())})
            
            agg_obl = df_filtered.groupby("–û–±–ª–∞—Å—Ç—å").agg(
                avg_score=(OUTCOME, 'mean'),
                count=(OUTCOME, 'size')
            ).reset_index()
            
            avg_obl_full = all_regions.merge(agg_obl, on="–û–±–ª–∞—Å—Ç—å", how="left")
            avg_obl_full['avg_score'] = avg_obl_full['avg_score'].round(2)
            avg_obl_full['bar_text'] = avg_obl_full.apply(
                lambda row: f"–°—Ä. –±–∞–ª–ª: {row['avg_score']}<br>–ö–æ–ª-–≤–æ: {int(row['count'])}" if pd.notna(row['count']) else "",
                axis=1
            )

            fig = px.bar(
                avg_obl_full.sort_values("avg_score", na_position="first"),
                x="avg_score", y="–û–±–ª–∞—Å—Ç—å", orientation="h",
                color="avg_score", color_continuous_scale="Tealgrn",
                text='bar_text',
                title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –æ–±–ª–∞—Å—Ç—è–º",
                labels={'avg_score': '–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', '–û–±–ª–∞—Å—Ç—å': '–û–±–ª–∞—Å—Ç—å'}
            )
            fig.update_traces(texttemplate='%{text}', textposition='inside')
            fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
            st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# PAGE 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
# =============================================================================
elif page == "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
    st.title("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    if df_filtered.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    else:
        st.markdown("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ç–∏–ø–æ–≤ —à–∫–æ–ª.")
        analysis_columns = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç", "–¢–∏–ø —à–∫–æ–ª—ã"]
        for col in analysis_columns:
            if col in df_filtered.columns:
                st.markdown("---")
                st.header(f"–ê–Ω–∞–ª–∏–∑ –ø–æ '{col}'")
                df_cat = df_filtered.dropna(subset=[col])
                if df_cat.empty:
                    st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ '{col}' —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
                    continue
                if col == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":
                    c1, c2 = st.columns(2)
                    with c1:
                        fig_box = px.box(df_cat, x=col, y=OUTCOME, color=col, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ '{col}'")
                        st.plotly_chart(fig_box, use_container_width=True)
                    with c2:
                        avg_cat = df_cat.groupby(col)[OUTCOME].mean().round(2).reset_index().sort_values(OUTCOME, ascending=False)
                        fig_bar_avg = px.bar(avg_cat, x=col, y=OUTCOME, color=col, title=f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ '{col}'")
                        fig_bar_avg.update_xaxes(tickangle=-90)
                        st.plotly_chart(fig_bar_avg, use_container_width=True)
                else:
                    avg_cat = df_cat.groupby(col)[OUTCOME].mean().round(2).reset_index().sort_values(OUTCOME, ascending=False)
                    fig_bar_avg = px.bar(avg_cat, x=col, y=OUTCOME, color=col, title=f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ '{col}'")
                    fig_bar_avg.update_xaxes(tickangle=-90)
                    st.plotly_chart(fig_bar_avg, use_container_width=True)
                counts = df_cat[col].value_counts().reset_index()
                counts.columns = [col, 'count']
                fig_bar_count = px.bar(counts, x=col, y='count', color=col, title=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ c–ª—É—à–∞—Ç–µ–ª–µ–π –ø–æ '{col}'")
                fig_bar_count.update_xaxes(tickangle=-90)
                st.plotly_chart(fig_bar_count, use_container_width=True)
            else:
                st.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")

# =============================================================================
# PAGE 3: –ö–∞—Ä—Ç–∞
# =============================================================================
elif page == "–ö–∞—Ä—Ç–∞":
    st.title("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")

    if df_filtered.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    else:
        try:
            # Load the raw GeoJSON file with English names
            with open("kz.json", "r", encoding="utf-8") as f:
                geojson_regions = json.load(f)
        except FileNotFoundError:
            st.error("–§–∞–π–ª 'kz.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ app.py.")
            st.stop()

        # --- MAPPING DICTIONARY ---
        # Maps Russian names from DataFrame to English names in GeoJSON properties
        region_map = {
            '–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Akmola',
            '–ê–∫—Ç—é–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Aktobe',
            '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Almaty',
            '–≥.–ê–ª–º–∞—Ç—ã': 'Almaty (city)',
            '–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Atyrau',
            '–í–æ—Å—Ç–æ—á–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'East Kazakhstan',
            '–ñ–∞–º–±—ã–ª—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Jambyl',
            '–ó–∞–ø–∞–¥–Ω–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'West Kazakhstan',
            '–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Karaganda',
            '–ö–æ—Å—Ç–∞–Ω–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kostanay',
            '–ö—ã–∑—ã–ª–æ—Ä–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Kyzylorda',
            '–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Mangystau',
            '–ü–∞–≤–ª–æ–¥–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Pavlodar',
            '–°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'North Kazakhstan',
            '–¢—É—Ä–∫–µ—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 'Turkestan',
            '–≥.–ê—Å—Ç–∞–Ω–∞': 'Astana',
            '–≥.–®—ã–º–∫–µ–Ω—Ç': 'Shymkent (city)',
            '–æ–±–ª–∞—Å—Ç—å –ñ–µ—Ç—ñ—Å—É':'Jetisu',
            '–æ–±–ª–∞—Å—Ç—å –ê–±–∞–π':'Abai',
            '–æ–±–ª–∞—Å—Ç—å “∞–ª—ã—Ç–∞—É':'Ulytau',
        }

        # --- MAP CHART ---
        st.header("–ö–∞—Ä—Ç–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º")
        color_by = st.radio(
            "–†–∞—Å–∫—Ä–∞—Å–∏—Ç—å –∫–∞—Ä—Ç—É –ø–æ:",
            ('–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'),
            horizontal=True
        )

        map_data = df_filtered.groupby('–û–±–ª–∞—Å—Ç—å').agg(
            avg_score=(OUTCOME, 'mean'),
            count=(OUTCOME, 'size')
        ).reset_index()

        # Create a new column with English names for mapping
        map_data['region_en'] = map_data['–û–±–ª–∞—Å—Ç—å'].map(region_map)

        # Check for regions that were not mapped
        unmapped_regions = map_data[map_data['region_en'].isna()]['–û–±–ª–∞—Å—Ç—å'].tolist()
        if unmapped_regions:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö: {unmapped_regions}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–æ–≤–∞—Ä—å `region_map` –≤ –∫–æ–¥–µ.")

        color_map_col = 'avg_score' if color_by == '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª' else 'count'

        fig_map = px.choropleth(
            map_data,
            geojson=geojson_regions,
            featureidkey="properties.name",  # Link to English name in GeoJSON
            locations='region_en',          # Use the mapped English names for location
            color=color_map_col,
            color_continuous_scale="Tealgrn",
            hover_name='–û–±–ª–∞—Å—Ç—å',           # Show Russian name in tooltip
            hover_data={'avg_score': ':.2f', 'count': True},
            title=f"{color_by} –ø–æ –æ–±–ª–∞—Å—Ç—è–º",
            scope="asia"
        )
        fig_map.update_geos(fitbounds="locations", visible=False)
        fig_map.update_layout(margin={"r":0,"t":40,"l":0,"b":0})
        st.plotly_chart(fig_map, use_container_width=True)

        # --- DISTRICT (–†–ê–ô–û–ù) DRILL-DOWN ---
        st.markdown("---")
        st.header("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∞–π–æ–Ω–∞–º")

        available_regions = sorted(df_filtered['–û–±–ª–∞—Å—Ç—å'].dropna().unique())
        selected_region = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:",
            options=available_regions,
            index=None,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å..."
        )

        if selected_region:
            if '–†–∞–π–æ–Ω' in df_filtered.columns:
                district_data = df_filtered[df_filtered['–û–±–ª–∞—Å—Ç—å'] == selected_region]
                if not district_data['–†–∞–π–æ–Ω'].dropna().empty:
                    district_agg = district_data.groupby('–†–∞–π–æ–Ω').agg(
                        avg_score=(OUTCOME, 'mean'),
                        count=(OUTCOME, 'size')
                    ).round(2).reset_index().sort_values('avg_score', ascending=True)

                    fig_district = px.bar(
                        district_agg,
                        x='avg_score',
                        y='–†–∞–π–æ–Ω',
                        orientation='h',
                        title=f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ä–∞–π–æ–Ω–∞–º: {selected_region}",
                        labels={'avg_score': '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', '–†–∞–π–æ–Ω': '–†–∞–π–æ–Ω'},
                        text='avg_score'
                    )
                    fig_district.update_traces(textposition='outside')
                    st.plotly_chart(fig_district, use_container_width=True)
                else:
                    st.info(f"–í –æ–±–ª–∞—Å—Ç–∏ '{selected_region}' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                st.warning("–°—Ç–æ–ª–±–µ—Ü '–†–∞–π–æ–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")

