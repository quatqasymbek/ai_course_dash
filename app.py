# app.py
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# =============================================================================
# 1) PAGE CONFIG
# =============================================================================
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Global constants
OUTCOME_COL = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

# Columns by theme (use only those that exist in df)
GEO_COLS = ["–û–±–ª–∞—Å—Ç—å", "–†–∞–π–æ–Ω", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
DEMOGRAPHIC_COLS = ["–ü–æ–ª", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "ethnicity", "–í–æ–∑—Ä–∞—Å—Ç", "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"]
PROF_COLS = ["–ö—É—Ä—Å", "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–¢–∏–ø —à–∫–æ–ª—ã", "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å", "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"]

# =============================================================================
# 2) HELPERS
# =============================================================================
def to_str_null(x):
    """Show NaN/None as 'NULL' for categorical display while preserving values for grouping/filters."""
    if pd.isna(x):
        return "NULL"
    return str(x)

def order_degree(series: pd.Series) -> pd.Categorical:
    """
    Ensure proper ordering for academic degree (supports both spellings).
    """
    order = [
        "PhD",
        "–∫–∞–Ω–¥–∏–¥–∞—Ç",
        "–¥–æ–∫—Ç–æ—Ä –Ω–∞—É–∫",
        "–¥–æ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é",
        "–º–∞–≥–∏—Å—Ç—Ä",
        "–Ω–µ –∏–º–µ–µ—Ç —Å—Ç–µ–ø–µ–Ω–∏",
        "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
        "NULL",
    ]
    s = series.astype(str).replace({"nan": "NULL", "None": "NULL"})
    s = s.replace({"–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"})  # light harmonization
    # Normalize common variants (case-insensitive matching)
    s_norm = s.str.strip().str.lower()
    mapping = {
        "phd": "PhD",
        "–∫–∞–Ω–¥–∏–¥–∞—Ç": "–∫–∞–Ω–¥–∏–¥–∞—Ç",
        "–¥–æ–∫—Ç–æ—Ä –Ω–∞—É–∫": "–¥–æ–∫—Ç–æ—Ä –Ω–∞—É–∫",
        "–¥–æ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é": "–¥–æ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ—Ñ–∏–ª—é",
        "–º–∞–≥–∏—Å—Ç—Ä": "–º–∞–≥–∏—Å—Ç—Ä",
        "–Ω–µ –∏–º–µ–µ—Ç —Å—Ç–µ–ø–µ–Ω–∏": "–Ω–µ –∏–º–µ–µ—Ç —Å—Ç–µ–ø–µ–Ω–∏",
        "–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ": "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
        "null": "NULL",
    }
    s_mapped = s_norm.map(mapping).fillna(s)  # fall back to original if unseen
    cat = pd.Categorical(s_mapped, categories=order, ordered=True)
    return cat

def order_age_group(series: pd.Series) -> pd.Categorical:
    """
    Order age groups like '10-19, 20-29, 30-39 ...' robustly (handles mixed formats).
    """
    s = series.fillna("NULL").astype(str)
    # Extract numeric start of range for sorting; unknown -> large sentinel
    starts = s.str.extract(r"(\d+)\s*-\s*(\d+)")
    starts = starts[0].astype(float)
    order = s.groupby(s).agg(lambda g: g.index.min()).sort_values(key=lambda idx: starts.loc[idx].fillna(1e9)).index.tolist()
    # Put NULL last
    if "NULL" in order:
        order = [x for x in order if x != "NULL"] + ["NULL"]
    return pd.Categorical(s, categories=order, ordered=True)

def numeric_series(df, col):
    try:
        return pd.to_numeric(df[col], errors="coerce")
    except Exception:
        return pd.Series(index=df.index, dtype="float")

@st.cache_data(show_spinner=False)
def load_data(file_path="df.xlsx") -> pd.DataFrame:
    try:
        df = pd.read_excel(file_path)
        return df
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{file_path}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å app.py.")
        return pd.DataFrame()

def available(df, cols):
    return [c for c in cols if c in df.columns]

def apply_geo_cascade(df, sel_obl, sel_rn, sel_org):
    f = df.copy()
    if "–û–±–ª–∞—Å—Ç—å" in f.columns and sel_obl:
        f = f[f["–û–±–ª–∞—Å—Ç—å"].astype(str).isin(sel_obl)]
    if "–†–∞–π–æ–Ω" in f.columns and sel_rn:
        f = f[f["–†–∞–π–æ–Ω"].astype(str).isin(sel_rn)]
    if "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" in f.columns and sel_org:
        f = f[f["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"].astype(str).isin(sel_org)]
    return f

def ensure_outcome(df):
    if OUTCOME_COL not in df.columns:
        st.error(f"–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '{OUTCOME_COL}'.")
        st.stop()
    return df

def with_null_display_options(df, col):
    """Return sorted unique options (with 'NULL' shown) for multiselects."""
    vals = df[col] if col in df.columns else pd.Series([], dtype=object)
    return sorted(to_str_null(v) for v in vals.unique())

def filter_by_multiselect(df, col, chosen):
    if not chosen:
        return df
    # Convert df values to string with NULL for matching
    col_as_str = df[col].apply(to_str_null)
    return df[col_as_str.isin(chosen)]

@st.cache_data(show_spinner=False)
def agg_mean(df, by_cols):
    g = df.groupby(by_cols, dropna=False)[OUTCOME_COL].mean().reset_index()
    g[OUTCOME_COL] = g[OUTCOME_COL].round(2)
    return g

def kpi_card(label, value, help_text=None):
    col1, col2 = st.columns([1, 2])
    with col1:
        st.metric(label, value)
    if help_text:
        with col2:
            st.caption(help_text)

# =============================================================================
# 3) LOAD + PREP
# =============================================================================
df = load_data()
if df.empty:
    st.stop()

df = ensure_outcome(df)

# Light normalization for degree spelling
if "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å" in df.columns and "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å" not in df.columns:
    df.rename(columns={"–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"}, inplace=True)

# Numeric casting
df[OUTCOME_COL] = numeric_series(df, OUTCOME_COL)
if "–í–æ–∑—Ä–∞—Å—Ç" in df.columns:
    df["–í–æ–∑—Ä–∞—Å—Ç"] = numeric_series(df, "–í–æ–∑—Ä–∞—Å—Ç")

# =============================================================================
# 4) SIDEBAR ‚Äì FILTERS
# =============================================================================
st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä—ã")

# --- Geographic cascading filters ---
geo_cols_present = available(df, GEO_COLS)
if geo_cols_present:
    st.sidebar.subheader("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
    # –û–±–ª–∞—Å—Ç—å
    sel_obl = []
    if "–û–±–ª–∞—Å—Ç—å" in geo_cols_present:
        opts_obl = sorted(df["–û–±–ª–∞—Å—Ç—å"].dropna().astype(str).unique().tolist())
        sel_obl = st.sidebar.multiselect("–û–±–ª–∞—Å—Ç—å", options=opts_obl, default=opts_obl)
    # –†–∞–π–æ–Ω depends on –æ–±–ª–∞—Å—Ç—å
    filt1 = df if not sel_obl else df[df["–û–±–ª–∞—Å—Ç—å"].astype(str).isin(sel_obl)]
    sel_rn = []
    if "–†–∞–π–æ–Ω" in geo_cols_present:
        opts_rn = sorted(filt1["–†–∞–π–æ–Ω"].dropna().astype(str).unique().tolist())
        sel_rn = st.sidebar.multiselect("–†–∞–π–æ–Ω", options=opts_rn, default=opts_rn)
    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è depends on —Ä–∞–π–æ–Ω
    filt2 = filt1 if not sel_rn else filt1[filt1["–†–∞–π–æ–Ω"].astype(str).isin(sel_rn)]
    sel_org = []
    if "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" in geo_cols_present:
        opts_org = sorted(filt2["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"].dropna().astype(str).unique().tolist())
        sel_org = st.sidebar.multiselect("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", options=opts_org, default=opts_org)
else:
    sel_obl, sel_rn, sel_org = [], [], []

# --- Other filters (nominal/ordinal) ---
st.sidebar.subheader("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å")
other_filters = {}
candidate_filters = available(
    df,
    ["–ö—É—Ä—Å", "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–¢–∏–ø —à–∫–æ–ª—ã", "–ü–æ–ª", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "ethnicity",
     "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"]
)
for col in candidate_filters:
    if col == "–í–æ–∑—Ä–∞—Å—Ç":  # numeric; we‚Äôll filter later as a range if needed
        continue
    # Prepare options with NULL visible
    opts = with_null_display_options(df, col)
    # Default = all
    other_filters[col] = st.sidebar.multiselect(col, options=opts, default=opts)

# Optional numeric filters
if "–í–æ–∑—Ä–∞—Å—Ç" in df.columns:
    st.sidebar.subheader("–í–æ–∑—Ä–∞—Å—Ç")
    vmin = int(np.nanmin(df["–í–æ–∑—Ä–∞—Å—Ç"])) if len(df["–í–æ–∑—Ä–∞—Å—Ç"].dropna()) else 0
    vmax = int(np.nanmax(df["–í–æ–∑—Ä–∞—Å—Ç"])) if len(df["–í–æ–∑—Ä–∞—Å—Ç"].dropna()) else 100
    sel_age = st.sidebar.slider("–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞", min_value=vmin, max_value=vmax, value=(vmin, vmax))
else:
    sel_age = None

# --- Build filtered dataframe ---
filtered = apply_geo_cascade(df, sel_obl, sel_rn, sel_org)
for col, chosen in other_filters.items():
    filtered = filter_by_multiselect(filtered, col, chosen)

if sel_age and "–í–æ–∑—Ä–∞—Å—Ç" in filtered.columns:
    filtered = filtered[(filtered["–í–æ–∑—Ä–∞—Å—Ç"] >= sel_age[0]) & (filtered["–í–æ–∑—Ä–∞—Å—Ç"] <= sel_age[1])]

# Keep outcome not null
filtered = filtered[filtered[OUTCOME_COL].notna()]

# Guard empty
if filtered.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞.")
    st.stop()

# =============================================================================
# 5) HEADER + KPI
# =============================================================================
st.title("üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
st.caption("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è ¬´–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª¬ª –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞—Ç–∞–º –∏ –∏–µ—Ä–∞—Ä—Ö–∏—è–º.")

c1, c2, c3, c4 = st.columns(4)
with c1:
    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", f"{len(filtered):,}".replace(",", " "))
with c2:
    st.metric("–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª", f"{filtered[OUTCOME_COL].mean():.2f}")
with c3:
    st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{filtered[OUTCOME_COL].median():.2f}")
with c4:
    st.metric("–°—Ç. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{filtered[OUTCOME_COL].std(ddof=1):.2f}")

st.divider()

# =============================================================================
# 6) TABS
# =============================================================================
tab_overview, tab_geo, tab_demo, tab_prof, tab_compare, tab_data = st.tabs(
    ["–û–±–∑–æ—Ä", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", "–ü—Ä–æ—Ñ–∏–ª—å", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ"]
)

# --------------------------------------
# TAB: OVERVIEW
# --------------------------------------
with tab_overview:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    cc1, cc2 = st.columns([2, 1])

    with cc1:
        bins = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞)", 10, 80, 30, key="bins_hist")
        fig_hist = px.histogram(
            filtered, x=OUTCOME_COL, nbins=bins, color_discrete_sequence=["#2a9d8f"]
        )
        fig_hist.update_layout(margin=dict(l=10, r=10, t=30, b=10))
        st.plotly_chart(fig_hist, use_container_width=True)

    with cc2:
        fig_box = px.box(
            filtered, y=OUTCOME_COL, points="outliers", color_discrete_sequence=["#e76f51"]
        )
        fig_box.update_layout(margin=dict(l=10, r=10, t=30, b=10))
        st.plotly_chart(fig_box, use_container_width=True)

    st.markdown("### –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    # Pick any existing categorical columns for ranking
    cat_cols = available(filtered, ["–ö—É—Ä—Å", "–ü–æ–ª", "–¢–∏–ø —à–∫–æ–ª—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "ethnicity", "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"])
    rank_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è", options=cat_cols or [None])
    if rank_col:
        # Special ordering for ordinals
        gdf = filtered.copy()
        if rank_col == "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å":
            gdf[rank_col] = order_degree(gdf[rank_col])
        if rank_col == "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞":
            gdf[rank_col] = order_age_group(gdf[rank_col])

        ranked = gdf.groupby(rank_col, dropna=False)[OUTCOME_COL].mean().round(2).reset_index().rename(columns={rank_col: "–ì—Ä—É–ø–ø–∞"})
        ranked["–ì—Ä—É–ø–ø–∞"] = ranked["–ì—Ä—É–ø–ø–∞"].astype(str).replace({"nan": "NULL"})
        ranked = ranked.sort_values(OUTCOME_COL, ascending=True)

        h = max(400, 35 * len(ranked))
        fig_rank = px.bar(
            ranked, x=OUTCOME_COL, y="–ì—Ä—É–ø–ø–∞", orientation="h",
            text=OUTCOME_COL, color=OUTCOME_COL, color_continuous_scale=px.colors.sequential.Tealgrn,
            height=h
        )
        fig_rank.update_layout(xaxis_title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª", yaxis_title=rank_col)
        st.plotly_chart(fig_rank, use_container_width=True)

# --------------------------------------
# TAB: GEOGRAPHY
# --------------------------------------
with tab_geo:
    st.subheader("–ò–µ—Ä–∞—Ä—Ö–∏—è: –û–±–ª–∞—Å—Ç—å ‚Üí –†–∞–π–æ–Ω ‚Üí –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")

    geo_sel_cols = available(filtered, GEO_COLS)
    if not geo_sel_cols:
        st.info("–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        # Sunburst/Treemap choice
        chart_type = st.radio("–¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã", ["Sunburst", "Treemap"], horizontal=True)
        path_cols = [c for c in GEO_COLS if c in filtered.columns]
        # convert to str for visual stability
        fgeo = filtered.copy()
        for c in path_cols:
            fgeo[c] = fgeo[c].astype(str).replace({"nan": "NULL"})

        if chart_type == "Sunburst":
            fig_sun = px.sunburst(
                fgeo, path=path_cols, values=None, color=OUTCOME_COL,
                color_continuous_scale=px.colors.sequential.Tealgrn,
                hover_data={OUTCOME_COL: ":.2f"},
            )
            fig_sun.update_layout(margin=dict(l=10, r=10, t=10, b=10))
            st.plotly_chart(fig_sun, use_container_width=True)
        else:
            fig_tree = px.treemap(
                fgeo, path=path_cols, values=None, color=OUTCOME_COL,
                color_continuous_scale=px.colors.sequential.Tealgrn,
                hover_data={OUTCOME_COL: ":.2f"},
            )
            fig_tree.update_layout(margin=dict(l=10, r=10, t=10, b=10))
            st.plotly_chart(fig_tree, use_container_width=True)

        # Table of top/bottom regions by mean
        st.markdown("#### –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏")
        geo_group_level = st.select_slider(
            "–£—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏",
            options=[c for c in GEO_COLS if c in filtered.columns],
            value=path_cols[0] if path_cols else None
        )
        if geo_group_level:
            geo_mean = agg_mean(filtered, [geo_group_level]).sort_values(OUTCOME_COL, ascending=False)
            colA, colB = st.columns(2)
            with colA:
                st.write("**–¢–æ–ø-10**")
                st.dataframe(geo_mean.head(10), use_container_width=True)
            with colB:
                st.write("**–ê–Ω—Ç–∏–ª–∏–¥–µ—Ä—ã-10**")
                st.dataframe(geo_mean.tail(10), use_container_width=True)

# --------------------------------------
# TAB: DEMOGRAPHICS
# --------------------------------------
with tab_demo:
    st.subheader("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑—Ä–µ–∑—ã")
    dcols = available(filtered, ["–ü–æ–ª", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "ethnicity", "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"])
    if not dcols:
        st.info("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    else:
        colX, colY = st.columns(2)
        with colX:
            d1 = st.selectbox("–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", options=dcols, index=0)
        with colY:
            d2 = st.selectbox("–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", options=["(–Ω–µ—Ç)"] + dcols, index=0)
            d2 = None if d2 == "(–Ω–µ—Ç)" else d2

        # Prepare ordered categories where needed
        f = filtered.copy()
        if "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" in f.columns:
            f["–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"] = order_age_group(f["–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"])
        if "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å" in f.columns:
            f["–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"] = order_degree(f["–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"])

        if d2:
            st.markdown("**–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π**")
            pivot = f.pivot_table(index=d1, columns=d2, values=OUTCOME_COL, aggfunc="mean")
            fig_hm = go.Figure(data=go.Heatmap(
                z=np.round(pivot.values, 2),
                x=[str(c) for c in pivot.columns],
                y=[str(i) for i in pivot.index],
                colorscale="Tealgrn",
                colorbar=dict(title="–°—Ä–µ–¥–Ω–µ–µ"),
                hoverongaps=False,
            ))
            fig_hm.update_layout(height=500, margin=dict(l=10, r=10, t=10, b=10))
            st.plotly_chart(fig_hm, use_container_width=True)
        else:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**")
            fig_violin = px.violin(f, x=d1, y=OUTCOME_COL, box=True, points="all", color=d1)
            fig_violin.update_layout(xaxis_title=d1, yaxis_title=OUTCOME_COL)
            st.plotly_chart(fig_violin, use_container_width=True)

# --------------------------------------
# TAB: PROFESSIONAL
# --------------------------------------
with tab_prof:
    st.subheader("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    pcols = available(filtered, ["–ö—É—Ä—Å", "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–¢–∏–ø —à–∫–æ–ª—ã", "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"])
    if not pcols:
        st.info("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    else:
        col1, col2 = st.columns(2)
        with col1:
            p1 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1", options=pcols, index=0, key="prof1")
        with col2:
            p2 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", options=["(–Ω–µ—Ç)"] + pcols, index=0, key="prof2")
            p2 = None if p2 == "(–Ω–µ—Ç)" else p2

        # Focus/highlight: —É—á–∏—Ç–µ–ª—å/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        highlight = st.checkbox("–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —É—á–∏—Ç–µ–ª—å/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö)", value=True)
        f = filtered.copy()
        # order degree
        if "–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å" in f.columns:
            f["–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"] = order_degree(f["–£—á—ë–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"])

        if p2:
            st.markdown("**–°—Ä–µ–¥–Ω–∏–µ –ø–æ –¥–≤—É–º –∏–∑–º–µ—Ä–µ–Ω–∏—è–º**")
            avg = f.groupby([p1, p2], dropna=False)[OUTCOME_COL].mean().round(2).reset_index()
            fig = px.bar(
                avg, x=p1, y=OUTCOME_COL, color=p2, barmode="group",
                text=OUTCOME_COL, color_discrete_sequence=px.colors.qualitative.Set2
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ/–∫–æ—Ä–æ–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞**")
            fig = px.box(f, x=p1, y=OUTCOME_COL, color=p1)
            st.plotly_chart(fig, use_container_width=True)

        # Dedicated view for –î–æ–ª–∂–Ω–æ—Å—Ç—å with highlight
        if "–î–æ–ª–∂–Ω–æ—Å—Ç—å" in f.columns:
            st.markdown("#### –î–æ–ª–∂–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª")
            avg_pos = f.groupby("–î–æ–ª–∂–Ω–æ—Å—Ç—å", dropna=False)[OUTCOME_COL].mean().round(2).reset_index()
            avg_pos["–î–æ–ª–∂–Ω–æ—Å—Ç—å"] = avg_pos["–î–æ–ª–∂–Ω–æ—Å—Ç—å"].astype(str).replace({"nan": "NULL"})
            avg_pos = avg_pos.sort_values(OUTCOME_COL)
            h = max(400, 30 * len(avg_pos))
            figp = px.bar(avg_pos, x=OUTCOME_COL, y="–î–æ–ª–∂–Ω–æ—Å—Ç—å", orientation="h",
                          text=OUTCOME_COL, color=OUTCOME_COL, color_continuous_scale=px.colors.sequential.Tealgrn, height=h)
            if highlight:
                # Add vertical line or bold annotation for —É—á–∏—Ç–µ–ª—å/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                mask = avg_pos["–î–æ–ª–∂–Ω–æ—Å—Ç—å"].str.lower().str.contains("—É—á–∏—Ç–µ–ª—å|–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", na=False)
                if mask.any():
                    y_vals = avg_pos.loc[mask, "–î–æ–ª–∂–Ω–æ—Å—Ç—å"].tolist()
                    for yv in y_vals:
                        figp.add_shape(type="rect", x0=avg_pos[OUTCOME_COL].min(), x1=avg_pos[OUTCOME_COL].max(),
                                       y0=avg_pos.index[avg_pos["–î–æ–ª–∂–Ω–æ—Å—Ç—å"] == yv][0] - 0.5,
                                       y1=avg_pos.index[avg_pos["–î–æ–ª–∂–Ω–æ—Å—Ç—å"] == yv][0] + 0.5,
                                       fillcolor="rgba(231, 111, 81, 0.15)", line_width=0)
            st.plotly_chart(figp, use_container_width=True)

# --------------------------------------
# TAB: COMPARISON
# --------------------------------------
with tab_compare:
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å—Ç—Ä–∞—Ç")

    # Choose a primary dimension and two levels to compare
    all_cat_cols = available(filtered, list(set(cat_cols + pcols)) if 'cat_cols' in locals() and 'pcols' in locals() else available(filtered, DEMOGRAPHIC_COLS + PROF_COLS))
    if not all_cat_cols:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    else:
        cmp_dim = st.selectbox("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", options=all_cat_cols)
        # Levels available (with NULL)
        levels = sorted(filtered[cmp_dim].apply(to_str_null).unique().tolist())
        ccol1, ccol2 = st.columns(2)
        with ccol1:
            lvl_a = st.selectbox("–°—Ç—Ä–∞—Ç–∞ A", options=levels, index=0)
        with ccol2:
            lvl_b = st.selectbox("–°—Ç—Ä–∞—Ç–∞ B", options=levels, index=min(1, len(levels)-1))

        # Secondary breakdown
        second_dim_options = [c for c in all_cat_cols if c != cmp_dim]
        second_dim = st.selectbox("–†–∞–∑–±–∏–≤–∫–∞ –ø–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", options=["(–Ω–µ—Ç)"] + second_dim_options)
        second_dim = None if second_dim == "(–Ω–µ—Ç)" else second_dim

        def mask_level(dfX, col, lvl):
            return dfX[dfX[col].apply(to_str_null) == lvl]

        A = mask_level(filtered, cmp_dim, lvl_a).assign(_group="A")
        B = mask_level(filtered, cmp_dim, lvl_b).assign(_group="B")
        cmp_df = pd.concat([A, B], ignore_index=True)

        if cmp_df.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç.")
        else:
            c1, c2, c3 = st.columns(3)
            with c1:
                st.metric("–°—Ä–µ–¥–Ω–∏–π (A)", f"{A[OUTCOME_COL].mean():.2f}")
            with c2:
                st.metric("–°—Ä–µ–¥–Ω–∏–π (B)", f"{B[OUTCOME_COL].mean():.2f}")
            with c3:
                delta = A[OUTCOME_COL].mean() - B[OUTCOME_COL].mean()
                st.metric("Œî A ‚àí B", f"{delta:+.2f}")

            if second_dim:
                avg2 = cmp_df.groupby(["_group", second_dim], dropna=False)[OUTCOME_COL].mean().round(2).reset_index()
                fig_cmp = px.bar(avg2, x=second_dim, y=OUTCOME_COL, color="_group", barmode="group",
                                 text=OUTCOME_COL, color_discrete_map={"A": "#2a9d8f", "B": "#e76f51"})
                st.plotly_chart(fig_cmp, use_container_width=True)
            else:
                fig_cmp2 = px.violin(cmp_df, x="_group", y=OUTCOME_COL, box=True, points="all",
                                     color="_group", color_discrete_map={"A": "#2a9d8f", "B": "#e76f51"})
                st.plotly_chart(fig_cmp2, use_container_width=True)

# --------------------------------------
# TAB: DATA & EXPORT
# --------------------------------------
with tab_data:
    st.subheader("–î–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
    show_cols = st.multiselect("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã", options=list(filtered.columns), default=list(filtered.columns))
    st.dataframe(filtered[show_cols], use_container_width=True, height=450)

    csv = filtered.to_csv(index=False).encode("utf-8-sig")
    st.download_button(
        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)",
        data=csv,
        file_name="filtered_data.csv",
        mime="text/csv",
    )

# =============================================================================
# 7) FOOTER NOTE
# =============================================================================
st.caption("üí° –°–æ–≤–µ—Ç—ã: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω—É–∂–Ω—ã–º —Ä–∞–∑—Ä–µ–∑–∞–º. –í –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π drill-down.")
