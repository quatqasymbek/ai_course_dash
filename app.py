# app.py (multi-page static dashboard)
# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# =============================================================================
# CONFIG
# =============================================================================
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏", page_icon="üìä", layout="wide")
OUTCOME = "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª"

@st.cache_data
def load_data(path="df.xlsx"):
    try:
        return pd.read_excel(path)
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()

df = load_data()
if df.empty or OUTCOME not in df.columns:
    st.stop()

df[OUTCOME] = pd.to_numeric(df[OUTCOME], errors="coerce")

# =============================================================================
# PAGE NAVIGATION
# =============================================================================
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])

# =============================================================================
# PAGE 1: –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
# =============================================================================
if page == "–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑":
    st.title("üìä –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏")
    st.markdown("–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—É, –≤–æ–∑—Ä–∞—Å—Ç—É –∏ –æ–±–ª–∞—Å—Ç—è–º.")

    # --- OVERALL STATS ---
    st.header("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", f"{len(df):,}")
    with c2:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{df[OUTCOME].mean():.2f}")
    with c3:
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω—ã–π –±–∞–ª–ª", f"{df[OUTCOME].median():.2f}")
    st.markdown("---")

    # --- GENDER STATS ---
    if "–ü–æ–ª" in df.columns:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É")
        c1, c2 = st.columns(2)
        with c1:
            st.plotly_chart(px.box(df, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –ø–æ–ª—É"), use_container_width=True)
        with c2:
            avg_gender = df.groupby("–ü–æ–ª")[OUTCOME].mean().reset_index()
            st.plotly_chart(px.bar(avg_gender, x="–ü–æ–ª", y=OUTCOME, color="–ü–æ–ª", title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –ø–æ–ª—É", color_discrete_sequence=px.colors.sequential.Teal), use_container_width=True)

    # --- AGE STATS ---
    if "–í–æ–∑—Ä–∞—Å—Ç" in df.columns:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
        scatter = go.Scatter(x=df["–í–æ–∑—Ä–∞—Å—Ç"], y=df[OUTCOME], mode="markers", opacity=0.4, marker=dict(color="#2a9d8f"), name="–ù–∞–±–ª—é–¥–µ–Ω–∏—è")
        df_sorted = df.sort_values("–í–æ–∑—Ä–∞—Å—Ç")
        df_sorted["rolling_mean"] = df_sorted[OUTCOME].rolling(window=30, min_periods=1).mean()
        smooth = go.Scatter(x=df_sorted["–í–æ–∑—Ä–∞—Å—Ç"], y=df_sorted["rolling_mean"], mode="lines", line=dict(color="orange", width=3), name="–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (30)")
        fig = go.Figure([scatter, smooth])
        fig.update_layout(title="–í–æ–∑—Ä–∞—Å—Ç –∏ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª (—Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥)", xaxis_title="–í–æ–∑—Ä–∞—Å—Ç", yaxis_title=OUTCOME)
        st.plotly_chart(fig, use_container_width=True)

    if "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞" in df.columns:
        c1, c2 = st.columns(2)
        with c1:
            st.plotly_chart(px.box(df, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME, color="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º"), use_container_width=True)
        with c2:
            avg_agegrp = df.groupby("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")[OUTCOME].mean().reset_index()
            st.plotly_chart(px.bar(avg_agegrp, x="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", y=OUTCOME, title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º", color=OUTCOME, color_continuous_scale="Tealgrn"), use_container_width=True)

    # --- REGION STATS ---
    if "–û–±–ª–∞—Å—Ç—å" in df.columns:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç—è–º")
        all_regions = pd.DataFrame({"–û–±–ª–∞—Å—Ç—å": sorted(df["–û–±–ª–∞—Å—Ç—å"].unique())})
        
        # Calculate both mean and count
        agg_obl = df.groupby("–û–±–ª–∞—Å—Ç—å").agg(
            avg_score=(OUTCOME, 'mean'),
            count=(OUTCOME, 'size')
        ).reset_index()
        
        avg_obl_full = all_regions.merge(agg_obl, on="–û–±–ª–∞—Å—Ç—å", how="left")
        avg_obl_full['avg_score'] = avg_obl_full['avg_score'].round(2)
        
        # Create text for display on bars
        avg_obl_full['bar_text'] = avg_obl_full.apply(lambda row: f"{row['avg_score']} (n={int(row['count'])})" if pd.notna(row['count']) else "N/A", axis=1)

        fig = px.bar(
            avg_obl_full.sort_values("avg_score", na_position="first"),
            x="avg_score", y="–û–±–ª–∞—Å—Ç—å", orientation="h",
            color="avg_score", color_continuous_scale="Tealgrn",
            text='bar_text',
            title="–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –æ–±–ª–∞—Å—Ç—è–º",
            labels={'avg_score': '–°—Ä–µ–¥–Ω–∏–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', '–û–±–ª–∞—Å—Ç—å': '–û–±–ª–∞—Å—Ç—å'}
        )
        fig.update_traces(textposition='outside')
        fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
        st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# PAGE 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
# =============================================================================
elif page == "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
    st.title("üîé –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    st.markdown("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")

    analysis_columns = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"]

    for col in analysis_columns:
        if col in df.columns:
            st.markdown("---")
            st.header(f"–ê–Ω–∞–ª–∏–∑ –ø–æ '{col}'")
            
            # Drop rows where the category itself is missing
            df_cat = df.dropna(subset=[col])

            if df_cat.empty:
                st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ '{col}'.")
                continue

            # –î–ª—è "–î–æ–ª–∂–Ω–æ—Å—Ç—å" –∏ "–ü—Ä–µ–¥–º–µ—Ç" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            if col in ["–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ü—Ä–µ–¥–º–µ—Ç"]:
                avg_cat = df_cat.groupby(col)[OUTCOME].mean().round(2).reset_index().sort_values(OUTCOME, ascending=False)
                fig_bar = px.bar(avg_cat, x=col, y=OUTCOME, color=col, title=f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ '{col}'")
                st.plotly_chart(fig_bar, use_container_width=True)
            else: # –î–ª—è "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –≥—Ä–∞—Ñ–∏–∫–∞
                c1, c2 = st.columns(2)
                
                with c1:
                    # Box plot for distribution
                    fig_box = px.box(df_cat, x=col, y=OUTCOME, color=col, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ '{col}'")
                    st.plotly_chart(fig_box, use_container_width=True)

                with c2:
                    # Bar chart for average scores
                    avg_cat = df_cat.groupby(col)[OUTCOME].mean().round(2).reset_index().sort_values(OUTCOME, ascending=False)
                    fig_bar = px.bar(avg_cat, x=col, y=OUTCOME, color=col, title=f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ '{col}'")
                    st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.warning(f"–°—Ç–æ–ª–±–µ—Ü '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")

